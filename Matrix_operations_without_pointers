#include<stdio.h>


void magic(int a[][10],int x,int y)
{
 int s,row[3]={0},coloumn[3]={0},t=0,dia1_sum=0,hash[10]={0},dia2_sum=0,flag=0,i,j;

 for(i=0;i<x;i++)
 {
   for(j=0;j<y;j++)
     hash[a[i][j]]++;
 }
for( i=1;i<=9;i++)
 {
  if(hash[i]==1)
   t++;
 }


if(t!=9)
 printf("\nENTERED MATRIX IS NOT A MAGIC SQUARE BECAUSE ELEMENTS ARE NOT UNIQUE\n");
 else
 {

 for(i=0; i<x; i++)
 {

   s=0;
  for( j=0;j<y;j++)
   s+=a[i][j];
   printf("sum of row: %d\n",s);
   row[i]=s;
 }
 if(row[0]!=row[1] ||row[1]!=row[2]|| row[2]!=row[0])
 {
   printf("\nENTERED MATRIX IS NOT A MAGIC SQUARE\n\n");
   flag++;
 }

 if(flag==0)
 {
 for( i=0; i<y; i++)
 {
   s=0;
  for( j=0;j<x;j++)
   s+=a[j][i];
   printf("sum of coloumn: %d\n",s);
   coloumn[i]=s;
 }

 for( i=0;i<x;i++)
 {
   for( j=0;j<y;j++)
   {
     if(i==j)
     dia1_sum=dia1_sum+a[i][j];
     if((i+j)==(y-1))
     dia2_sum+=a[i][j];
   }
 }
 if(row[0]==coloumn[0]  && coloumn[0]==coloumn[1] && coloumn[1]==coloumn[2]&& coloumn[2]==dia1_sum && dia1_sum==dia2_sum)
 printf("\n---IT IS A MAGIC SQUARE---");
 }

}
}



void add(int a[][10],int b[][10],int x,int y,int t,int z)
{
 if(x==t && y==z)
 {
  int i,j,s;
  printf("\nSUM OF ENTERED MATRICES IS:\n");
  for(i=0;i<x;i++)
  {
    for(j=0;j<y;j++)
      {
       s=0;
       s=s+a[i][j]+b[i][j];
       printf("%d ",s);
      }
    printf("\n");
  }
 }
else
printf("\nADDITION IS NOT POSSIBLE:");
 }

void multiply(int a[][10],int b[][10],int x,int y,int r,int s)
{
  int i,j,k,m=x,n=y,p=r,q=s,c[10][10],sum=0;
  if(m!=q || n!=p)
   printf("\nMULTIPLICATION IS NOT POSSIBLE\n");
   else
   {
     for(i=0;i<m;i++)
   {
    for(j=0;j<n;j++)
    {
      for( k=0;k<p;k++)
      {
         sum+=a[i][k]*b[k][j];
      }
      c[i][j]=sum;
      sum=0;
    }
    }
  for(i=0;i<p;i++)
  {
    for(j=0;j<q;j++)
    printf("%d  ",c[i][j]);
    printf("\n");
  }

 }
 }

 void transpose(int a[10][10],int m,int n)
{
  int i,j,b[m][n];
  if(m==n)
  {
  printf("\nTRANSPOSE OF MATRIX A IS:\n");
  for(i=0;i<m;i++)
  {
    for(j=0;j<n;j++)
    {
      b[i][j]=a[j][i];
     }
   }
   for(i=0;i<m;i++)
  {
    for(j=0;j<n;j++)
    {
      printf("%d ",b[i][j]);
     }
     printf("\n");
   }
   }
   else
   printf("\nTRANSPOSE IS NOT POSSSIBLE\n:");
}

void saddle(int a[][10],int p1,int p2)
{
  int i,j,k,pos[10][10],c=0;
  for(i=0;i<p1;i++)
  {
    int min=a[i][0];
    for(j=0;j<p2;j++)
    {
       if(min>=a[i][j])
          {
              min=a[i][j];
              pos[0][0]=i;
              pos[0][1]=j;
          }
     }
     j=pos[0][1];
     int max=a[0][j];
     for(k=0;k<p1;k++)
     {
        if(max<=a[k][j])
         {
             max=a[k][j];
             pos[1][0]=k;
             pos[1][1]=j;
         }
      }
      if(min==max)
      {
        if(pos[0][0]==pos[1][0] && pos[0][1]==pos[1][1])
        {
           printf("\nSaddle point(%d,%d)=%d\n",pos[0][0], pos[1][1],max);
        }
        else
        c++;
      }
   }
   if(c==3)
   printf("\nNo saddle point found!!\n");
 }

int main()
{
   char ch;
   int choice;
   int m,n,p,q,i,j;
 int a[10][10],b[10][10];
 printf("\nENTER THE SIZE OF MATRIX 1 -[ROWS][COLOUMNS]:");
 scanf("%d %d",&m,&n);

 printf("\nENTER THE VALUES Of MATRIX 1: \n");
 for(i=0;i<m;i++)
 {
  for( j=0;j<n;j++)
   scanf("%d",&a[i][j]);
 }

 printf("\nENTER THE SIZE OF MATRIX 2  -[ROWS][COLOUMNS]:");
 scanf("%d %d",&p,&q);

 printf("ENTER THE VALUES Of MATRIX 2: ");
 for(i=0;i<p;i++)
 {
  for(j=0;j<q;j++)
   scanf("%d",&b[i][j]);
 }
 printf("\nMATRIX 1: \n");
 for( i=0;i<m;i++)
 {
  for( j=0;j<n;j++)
   printf("%d  ",a[i][j]);
   printf("\n");
 }

 printf("MATRIX 2:\n");
 for( i=0;i<p;i++)
 {
  for( j=0;j<q;j++)
   printf("%d  ",b[i][j]);
   printf("\n");
 }

   do
   {
     printf("\n\n1 TO FIND ADDITION OF TWO MATRICES\n2 TO FIND MULTIPLICATION OF MATRICES\n3 TO MAGIC SQUARE\n4 TO FIND TRANSPOSE\n5 TO FIND SADDLE POINT\n0 TO EXIT\n");
     printf("ENTER YOUR CHOICE: ");
     scanf("%d",&choice);
     switch(choice)
     {
      case 1:
              add(a,b,m,n,p,q);
              break;
      case 2:
              multiply(a,b,m,n,p,q);
              break;
      case 3:
              magic(a,m,n);
              break;

      case 4:
              transpose(a,m,n);
              break;

       case 5:
             saddle(a,m,n);
             break;

      }


   }while(choice!=0);
 }

































